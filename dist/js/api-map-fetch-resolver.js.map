{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///js/api-map-fetch-resolver.js","webpack:///webpack/bootstrap 5f0a98fd97241f6730d2","webpack:///./src/api-map-fetch-resolver.js","webpack:///./~/whatwg-fetch/fetch.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","_typeof","Symbol","iterator","obj","constructor","prototype","default","url","method","data","options","optionalOptions","headers","redirect","mandatoryOptions","assign","paramString","keys","map","key","join","promise","fetch","body","undefined","self","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","items","next","shift","done","support","iterable","Headers","forEach","append","getOwnPropertyNames","consumed","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","blob","FileReader","readAsArrayBuffer","readBlobAsText","readAsText","Body","_initBody","_bodyInit","_bodyText","Blob","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","searchParams","URLSearchParams","toString","arrayBuffer","ArrayBuffer","Error","get","set","type","rejected","then","text","decode","json","JSON","parse","normalizeMethod","upcased","toUpperCase","methods","indexOf","Request","input","credentials","mode","referrer","form","trim","split","bytes","replace","decodeURIComponent","xhr","head","pairs","getAllResponseHeaders","header","Response","bodyInit","status","ok","statusText","e","list","push","values","getAll","has","hasOwnProperty","callback","thisArg","entries","clone","response","redirectStatuses","RangeError","location","init","responseURL","getResponseHeader","request","XMLHttpRequest","responseText","ontimeout","open","withCredentials","responseType","setRequestHeader","send","polyfill"],"mappings":"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","file":"js/api-map-fetch-resolver.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ApiMapFetchResolver\"] = factory();\n\telse\n\t\troot[\"ApiMapFetchResolver\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ApiMapFetchResolver\"] = factory();\n\telse\n\t\troot[\"ApiMapFetchResolver\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\t__webpack_require__(1);\n\t\n\texports.default = function (url, method, data, options) {\n\t\n\t    var optionalOptions = {\n\t        headers: [],\n\t        redirect: 'follow'\n\t    };\n\t\n\t    var mandatoryOptions = {};\n\t\n\t    options = Object.assign({}, optionalOptions, options, mandatoryOptions);\n\t\n\t    if (method === 'GET' && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n\t        var paramString = '?' + Object.keys(data).map(function (key) {\n\t            return key + '=' + data[key];\n\t        }).join('&');\n\t        url = url + paramString;\n\t    }\n\t\n\t    var promise = fetch(url, {\n\t        method: method,\n\t        body: method != 'GET' ? data : undefined,\n\t        headers: options.headers,\n\t        redirect: options.redirect\n\t    });\n\t\n\t    return promise;\n\t};\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t(function(self) {\n\t  'use strict';\n\t\n\t  if (self.fetch) {\n\t    return\n\t  }\n\t\n\t  var support = {\n\t    searchParams: 'URLSearchParams' in self,\n\t    iterable: 'Symbol' in self && 'iterator' in Symbol,\n\t    blob: 'FileReader' in self && 'Blob' in self && (function() {\n\t      try {\n\t        new Blob()\n\t        return true\n\t      } catch(e) {\n\t        return false\n\t      }\n\t    })(),\n\t    formData: 'FormData' in self,\n\t    arrayBuffer: 'ArrayBuffer' in self\n\t  }\n\t\n\t  function normalizeName(name) {\n\t    if (typeof name !== 'string') {\n\t      name = String(name)\n\t    }\n\t    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n\t      throw new TypeError('Invalid character in header field name')\n\t    }\n\t    return name.toLowerCase()\n\t  }\n\t\n\t  function normalizeValue(value) {\n\t    if (typeof value !== 'string') {\n\t      value = String(value)\n\t    }\n\t    return value\n\t  }\n\t\n\t  // Build a destructive iterator for the value list\n\t  function iteratorFor(items) {\n\t    var iterator = {\n\t      next: function() {\n\t        var value = items.shift()\n\t        return {done: value === undefined, value: value}\n\t      }\n\t    }\n\t\n\t    if (support.iterable) {\n\t      iterator[Symbol.iterator] = function() {\n\t        return iterator\n\t      }\n\t    }\n\t\n\t    return iterator\n\t  }\n\t\n\t  function Headers(headers) {\n\t    this.map = {}\n\t\n\t    if (headers instanceof Headers) {\n\t      headers.forEach(function(value, name) {\n\t        this.append(name, value)\n\t      }, this)\n\t\n\t    } else if (headers) {\n\t      Object.getOwnPropertyNames(headers).forEach(function(name) {\n\t        this.append(name, headers[name])\n\t      }, this)\n\t    }\n\t  }\n\t\n\t  Headers.prototype.append = function(name, value) {\n\t    name = normalizeName(name)\n\t    value = normalizeValue(value)\n\t    var list = this.map[name]\n\t    if (!list) {\n\t      list = []\n\t      this.map[name] = list\n\t    }\n\t    list.push(value)\n\t  }\n\t\n\t  Headers.prototype['delete'] = function(name) {\n\t    delete this.map[normalizeName(name)]\n\t  }\n\t\n\t  Headers.prototype.get = function(name) {\n\t    var values = this.map[normalizeName(name)]\n\t    return values ? values[0] : null\n\t  }\n\t\n\t  Headers.prototype.getAll = function(name) {\n\t    return this.map[normalizeName(name)] || []\n\t  }\n\t\n\t  Headers.prototype.has = function(name) {\n\t    return this.map.hasOwnProperty(normalizeName(name))\n\t  }\n\t\n\t  Headers.prototype.set = function(name, value) {\n\t    this.map[normalizeName(name)] = [normalizeValue(value)]\n\t  }\n\t\n\t  Headers.prototype.forEach = function(callback, thisArg) {\n\t    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n\t      this.map[name].forEach(function(value) {\n\t        callback.call(thisArg, value, name, this)\n\t      }, this)\n\t    }, this)\n\t  }\n\t\n\t  Headers.prototype.keys = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push(name) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.values = function() {\n\t    var items = []\n\t    this.forEach(function(value) { items.push(value) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.entries = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push([name, value]) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  if (support.iterable) {\n\t    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n\t  }\n\t\n\t  function consumed(body) {\n\t    if (body.bodyUsed) {\n\t      return Promise.reject(new TypeError('Already read'))\n\t    }\n\t    body.bodyUsed = true\n\t  }\n\t\n\t  function fileReaderReady(reader) {\n\t    return new Promise(function(resolve, reject) {\n\t      reader.onload = function() {\n\t        resolve(reader.result)\n\t      }\n\t      reader.onerror = function() {\n\t        reject(reader.error)\n\t      }\n\t    })\n\t  }\n\t\n\t  function readBlobAsArrayBuffer(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsArrayBuffer(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function readBlobAsText(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsText(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function Body() {\n\t    this.bodyUsed = false\n\t\n\t    this._initBody = function(body) {\n\t      this._bodyInit = body\n\t      if (typeof body === 'string') {\n\t        this._bodyText = body\n\t      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n\t        this._bodyBlob = body\n\t      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n\t        this._bodyFormData = body\n\t      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t        this._bodyText = body.toString()\n\t      } else if (!body) {\n\t        this._bodyText = ''\n\t      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n\t        // Only support ArrayBuffers for POST method.\n\t        // Receiving ArrayBuffers happens via Blobs, instead.\n\t      } else {\n\t        throw new Error('unsupported BodyInit type')\n\t      }\n\t\n\t      if (!this.headers.get('content-type')) {\n\t        if (typeof body === 'string') {\n\t          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n\t        } else if (this._bodyBlob && this._bodyBlob.type) {\n\t          this.headers.set('content-type', this._bodyBlob.type)\n\t        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n\t        }\n\t      }\n\t    }\n\t\n\t    if (support.blob) {\n\t      this.blob = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return Promise.resolve(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as blob')\n\t        } else {\n\t          return Promise.resolve(new Blob([this._bodyText]))\n\t        }\n\t      }\n\t\n\t      this.arrayBuffer = function() {\n\t        return this.blob().then(readBlobAsArrayBuffer)\n\t      }\n\t\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return readBlobAsText(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as text')\n\t        } else {\n\t          return Promise.resolve(this._bodyText)\n\t        }\n\t      }\n\t    } else {\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        return rejected ? rejected : Promise.resolve(this._bodyText)\n\t      }\n\t    }\n\t\n\t    if (support.formData) {\n\t      this.formData = function() {\n\t        return this.text().then(decode)\n\t      }\n\t    }\n\t\n\t    this.json = function() {\n\t      return this.text().then(JSON.parse)\n\t    }\n\t\n\t    return this\n\t  }\n\t\n\t  // HTTP methods whose capitalization should be normalized\n\t  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\t\n\t  function normalizeMethod(method) {\n\t    var upcased = method.toUpperCase()\n\t    return (methods.indexOf(upcased) > -1) ? upcased : method\n\t  }\n\t\n\t  function Request(input, options) {\n\t    options = options || {}\n\t    var body = options.body\n\t    if (Request.prototype.isPrototypeOf(input)) {\n\t      if (input.bodyUsed) {\n\t        throw new TypeError('Already read')\n\t      }\n\t      this.url = input.url\n\t      this.credentials = input.credentials\n\t      if (!options.headers) {\n\t        this.headers = new Headers(input.headers)\n\t      }\n\t      this.method = input.method\n\t      this.mode = input.mode\n\t      if (!body) {\n\t        body = input._bodyInit\n\t        input.bodyUsed = true\n\t      }\n\t    } else {\n\t      this.url = input\n\t    }\n\t\n\t    this.credentials = options.credentials || this.credentials || 'omit'\n\t    if (options.headers || !this.headers) {\n\t      this.headers = new Headers(options.headers)\n\t    }\n\t    this.method = normalizeMethod(options.method || this.method || 'GET')\n\t    this.mode = options.mode || this.mode || null\n\t    this.referrer = null\n\t\n\t    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n\t      throw new TypeError('Body not allowed for GET or HEAD requests')\n\t    }\n\t    this._initBody(body)\n\t  }\n\t\n\t  Request.prototype.clone = function() {\n\t    return new Request(this)\n\t  }\n\t\n\t  function decode(body) {\n\t    var form = new FormData()\n\t    body.trim().split('&').forEach(function(bytes) {\n\t      if (bytes) {\n\t        var split = bytes.split('=')\n\t        var name = split.shift().replace(/\\+/g, ' ')\n\t        var value = split.join('=').replace(/\\+/g, ' ')\n\t        form.append(decodeURIComponent(name), decodeURIComponent(value))\n\t      }\n\t    })\n\t    return form\n\t  }\n\t\n\t  function headers(xhr) {\n\t    var head = new Headers()\n\t    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n\t    pairs.forEach(function(header) {\n\t      var split = header.trim().split(':')\n\t      var key = split.shift().trim()\n\t      var value = split.join(':').trim()\n\t      head.append(key, value)\n\t    })\n\t    return head\n\t  }\n\t\n\t  Body.call(Request.prototype)\n\t\n\t  function Response(bodyInit, options) {\n\t    if (!options) {\n\t      options = {}\n\t    }\n\t\n\t    this.type = 'default'\n\t    this.status = options.status\n\t    this.ok = this.status >= 200 && this.status < 300\n\t    this.statusText = options.statusText\n\t    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n\t    this.url = options.url || ''\n\t    this._initBody(bodyInit)\n\t  }\n\t\n\t  Body.call(Response.prototype)\n\t\n\t  Response.prototype.clone = function() {\n\t    return new Response(this._bodyInit, {\n\t      status: this.status,\n\t      statusText: this.statusText,\n\t      headers: new Headers(this.headers),\n\t      url: this.url\n\t    })\n\t  }\n\t\n\t  Response.error = function() {\n\t    var response = new Response(null, {status: 0, statusText: ''})\n\t    response.type = 'error'\n\t    return response\n\t  }\n\t\n\t  var redirectStatuses = [301, 302, 303, 307, 308]\n\t\n\t  Response.redirect = function(url, status) {\n\t    if (redirectStatuses.indexOf(status) === -1) {\n\t      throw new RangeError('Invalid status code')\n\t    }\n\t\n\t    return new Response(null, {status: status, headers: {location: url}})\n\t  }\n\t\n\t  self.Headers = Headers\n\t  self.Request = Request\n\t  self.Response = Response\n\t\n\t  self.fetch = function(input, init) {\n\t    return new Promise(function(resolve, reject) {\n\t      var request\n\t      if (Request.prototype.isPrototypeOf(input) && !init) {\n\t        request = input\n\t      } else {\n\t        request = new Request(input, init)\n\t      }\n\t\n\t      var xhr = new XMLHttpRequest()\n\t\n\t      function responseURL() {\n\t        if ('responseURL' in xhr) {\n\t          return xhr.responseURL\n\t        }\n\t\n\t        // Avoid security warnings on getResponseHeader when not allowed by CORS\n\t        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n\t          return xhr.getResponseHeader('X-Request-URL')\n\t        }\n\t\n\t        return\n\t      }\n\t\n\t      xhr.onload = function() {\n\t        var options = {\n\t          status: xhr.status,\n\t          statusText: xhr.statusText,\n\t          headers: headers(xhr),\n\t          url: responseURL()\n\t        }\n\t        var body = 'response' in xhr ? xhr.response : xhr.responseText\n\t        resolve(new Response(body, options))\n\t      }\n\t\n\t      xhr.onerror = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.ontimeout = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.open(request.method, request.url, true)\n\t\n\t      if (request.credentials === 'include') {\n\t        xhr.withCredentials = true\n\t      }\n\t\n\t      if ('responseType' in xhr && support.blob) {\n\t        xhr.responseType = 'blob'\n\t      }\n\t\n\t      request.headers.forEach(function(value, name) {\n\t        xhr.setRequestHeader(name, value)\n\t      })\n\t\n\t      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n\t    })\n\t  }\n\t  self.fetch.polyfill = true\n\t})(typeof self !== 'undefined' ? self : this);\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// js/api-map-fetch-resolver.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5f0a98fd97241f6730d2","import 'whatwg-fetch';\n\nexport default (url, method, data, options) => {\n\n    let optionalOptions = {\n        headers: [],\n        redirect: 'follow'\n    }\n\n    let mandatoryOptions = {};\n\n    options = Object.assign({}, optionalOptions, options, mandatoryOptions);\n\n    if (method === 'GET' && typeof data === 'object') {\n        let paramString = '?' + Object.keys(data).map(key => `${key}=${data[key]}`).join('&');\n        url = url + paramString;\n    }\n\n    let promise = fetch(url, {\n        method: method,\n        body: method != 'GET' ? data : undefined,\n        headers: options.headers,\n        redirect: options.redirect\n    });\n\n    return promise;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/api-map-fetch-resolver.js","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/whatwg-fetch/fetch.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}